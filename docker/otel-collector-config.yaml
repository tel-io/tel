receivers:
  otlp:
    protocols:
      grpc:
        max_recv_msg_size_mib: 8 # for collector it would be better get 4
  syslog:
    tcp:
      listen_address: "0.0.0.0:54527"
    protocol: rfc3164
    location: UTC
#    operators:
#      - type: move
#        from: attributes.message
#        to: body
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 15s
          honor_labels: false
          static_configs:
            - targets: ['127.0.0.1:8888']
exporters:
  logging:
    verbosity: Basic
    sampling_initial: 10
    sampling_thereafter: 50
  prometheusremotewrite:
    endpoint: http://mimir:9009/api/v1/push
    remote_write_queue:
      enabled: true
      num_consumers: 30
    retry_on_failure:
      enabled: false
    resource_to_telemetry_conversion:
      enabled: true
  otlp/tempo:
    compression: snappy
    endpoint: tempo:4317
    timeout: 1s
    sending_queue:
      enabled: true
      num_consumers: 30
      queue_size: 500
    retry_on_failure:
      enabled: false
      initial_interval: 1s
      max_interval: 10s
      max_elapsed_time: 20s
    tls:
      insecure: true
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"
    retry_on_failure:
      enabled: false
    sending_queue:
      # Enabled indicates whether to not enqueue batches before sending to the consumerSender.
      enabled: false
      # NumConsumers is the number of consumers from the queue.
      num_consumers: 30
      # QueueSize is the maximum number of batches allowed in queue at a given time.
      queue_size: 10000

processors:
  # fix duplicated with receiver prometheus
  attributes/metrics:
    actions:
      - action: delete
        key: service.namespace
      - action: delete
        key: deployment.environment
  attributes/loki:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: level
  resource/loki:
    attributes:
#  loki.format default is json
# we override via transform
#      - action: insert
#        key: loki.format
#        value: json #logfmt
      - action: insert
        key: loki.resource.labels
        value: service, namespace, license, deployment_environment
  batch:
    send_batch_max_size: 500
    send_batch_size: 300
    timeout: 500ms
  memory_limiter:
    check_interval: 2s
    limit_mib: 2000
    spike_limit_mib: 200
  resource:
    attributes:
      - action: insert
        key: resource
        value: "service" # <<<<< REPLACE https://wiki.time2go.tech/pages/viewpage.action?pageId=107735386
      - action: upsert
        key: host.name
        value: "XXXXX_XXXXX-XXXXX"
      - action: upsert
        key: namespace
        value: "DEMO"
      - action: upsert
        key: license
        value: "com"
      - action: upsert
        key: deployment_environment
        value: "dev"
      - action: delete
        key: http.scheme
      - action: delete
        key: net.host.port
      - action: insert
        from_attribute: service.name
        key: service
#      - action: upsert
#        from_attribute: host.name
#        key: host
#      - action: upsert
#        from_attribute: service
#        key: service.name
#      - action: upsert
#        from_attribute: namespace
#        key: service.namespace
  resource/tempo:
    attributes:
      - action: insert
        from_attribute: service
        key: service.name
#      - action: delete
#        key: service
  transform/log:
    # backport compatibility tel < 2.2.0
    log_statements:
      - context: log
        statements:
          - set(resource.attributes["loki.format"], "logfmt") where severity_text != ""

extensions:
  health_check:
    endpoint: 127.0.0.1:13133
  pprof:
    endpoint: 127.0.0.1:1888
  zpages:
    endpoint: 127.0.0.1:55679

service:
  extensions: [ pprof, zpages, health_check ]
  telemetry:
    metrics:
      address: "127.0.0.1:8888"
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [resource, resource/tempo, memory_limiter, batch]
      exporters: [ logging, otlp/tempo ]
    metrics:
      receivers: [  prometheus, otlp ]
      processors: [resource, memory_limiter] #batch
      exporters: [ logging, prometheusremotewrite]
    logs:
      receivers: [  otlp ]
      processors: [resource, attributes/loki, resource/loki, transform/log, memory_limiter, batch]
      exporters: [ logging, loki ]
